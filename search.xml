<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>electron学习:实现一个文件分类器</title>
    <url>/2021/03/29/electron%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%99%A8/</url>
    <content><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul>
<li><a href="https://github.com/FanLu1994/file_arranger">文件分类器</a></li>
</ul>
<h2 id="sunny-动机"><a href="#sunny-动机" class="headerlink" title=":sunny:动机"></a><span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动机</h2><p>因为喜欢看电子书,之前都用多看,但是没有花钱买过多看里面的书,会找很多epub的电子书资源.  (现在用微信读书了,蛮香的,都是正版,而且基本不用花钱)</p>
<p>电子书资源网站现在死的好多,但还是有很多百度网盘的资源. 整理的都很好, 大部分都包含了多种格式的电子书,其中就包括了epub.</p>
<p>曾经一次性下载了很多百度网盘的电子书资源,epub文件都在各自的文件夹内,要传到多看上的话就要一次次的打开所有文件夹.  很烦,当时写了一个小脚本,如下:</p>
<pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python提取epub</span></div><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> shutil

dir_path <span class="token operator">=</span> <span class="token string">"D:\BaiduNetdiskDownload"</span>
epub_path <span class="token operator">=</span> <span class="token string">"D:\BaiduNetdiskDownload\epub"</span>

<span class="token keyword">for</span> path<span class="token punctuation">,</span>dir_list<span class="token punctuation">,</span>file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span> file_name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".epub"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
            old_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>
            new_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>epub_path<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>
            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>old_file_path<span class="token punctuation">,</span>new_file_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>后来在公司的项目中接触到了vue写前端,也知道了electron这个东西,就决定学习一下,把这个可视化的文件分类器作为一个学习的小项目.  </p>
<p>功能很简陋,实现也不完美,作为一个入门的小程序,勉勉强强.</p>
<h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>​    因为是一个非常简单的项目,设计思路也很简单.</p>
<ol>
<li>首页用一个输入框点击可以像选择想要处理的文件夹</li>
<li>将文件夹存储到vuex中</li>
<li>选择文件夹后,出现处理按钮,点击跳转到文件列表页面</li>
<li>利用vuex中的文件夹,遍历获取文件夹下面所有文件,构造一个以文件类型为key的map, 作为文件map,也存储到vuex中</li>
<li>文件列表页面分类展示所有文件</li>
<li>每一类文件都有复制和移动功能</li>
<li>复制/移动允许用户选择一个文件夹,在该文件夹下面新建一个文件,以文件类型为文件名, 根据按钮,将相同类型文件复制或者移动到新文件夹</li>
<li>结束</li>
</ol>
<h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><p>因为在公司的项目中使用的是vue+elementui来写前端。 因此想要找一个同样支持vue的electron现有框架来写。 在github上找到了<a href="https://github.com/SimulatedGREG/electron-vue%EF%BC%8C%E6%84%9F%E8%A7%89%E5%BE%88%E5%A5%BD%E7%94%A8%E3%80%82">https://github.com/SimulatedGREG/electron-vue，感觉很好用。</a></p>
<p>在UI库方面，用过element-ui，已经是很好用的一个库了。 但是想试试别的，一开始选择了bulma，后来在开发过程中，觉得这个不够“傻瓜式”，于是又引入了iview。</p>
<p>最终选择：</p>
<ol>
<li><a href="https://github.com/SimulatedGREG/electron-vue">electron-vue</a></li>
<li><a href="https://bulma.zcopy.site/documentation/overview/">bulma</a></li>
<li><a href="https://www.iviewui.com/docs/introduce">iviewui</a></li>
</ol>
<h2 id="loudspeaker-具体实现"><a href="#loudspeaker-具体实现" class="headerlink" title=":loudspeaker:具体实现"></a><span class="github-emoji"><span>📢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>具体实现</h2><h3 id="1-首页实现"><a href="#1-首页实现" class="headerlink" title="1 首页实现"></a>1 首页实现</h3><p>​    首页需求很简单，只要一个输入框，用来选择文件夹，然后将文件夹存储到vuex, 并根据文件夹,获取所有文件列表,存储到vuex</p>
<p>​    实现界面如下：</p>
<p><img src="/images/%E9%A6%96%E9%A1%B5.png"></p>
<h3 id="2-文件夹选择"><a href="#2-文件夹选择" class="headerlink" title="2 文件夹选择"></a>2 文件夹选择</h3><ul>
<li>remote.dialog.showOpenDialog是electon提供的对话框函数</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>选择文件夹</span></div><code class="language-js"><span class="token comment">//打开文件夹    </span>
<span class="token function">openDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> remote<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        properties<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'openFile'</span><span class="token punctuation">,</span><span class="token string">"openDirectory"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>dir <span class="token operator">=</span> result
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">,</span>
        
    <span class="token comment">//将文件夹路径设置为全局状态</span>
    <span class="token function">setPath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'ChangePath'</span><span class="token punctuation">,</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 获取所有文件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'saveList'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>filesArray<span class="token punctuation">)</span> <span class="token comment">//存储到vuex</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="3-文件目录扫描"><a href="#3-文件目录扫描" class="headerlink" title="3 文件目录扫描"></a>3 文件目录扫描</h3><p>​    使用nodejs的fs模块和path模块</p>
<ul>
<li>fs.stat()  给定路径,获取文件信息</li>
<li>path.join()  路径和文件名生成完整路径</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>文件目录保存</span></div><code class="language-js"> <span class="token comment">// 获取文件夹下所有文件</span>
<span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token parameter">targetPath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> that  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历当前path下所有文件</span>
                <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>
                fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 判断文件是否是文件夹</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                        <span class="token keyword">let</span> isFile <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">let</span> isDir <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>isFile<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            <span class="token comment">// console.log(filename)</span>
                            that<span class="token punctuation">.</span>filesArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>   <span class="token comment">//递归处理文件夹</span>
                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                            that<span class="token punctuation">.</span><span class="token function">getAllFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-文件字典生成"><a href="#4-文件字典生成" class="headerlink" title="4 文件字典生成"></a>4 文件字典生成</h3><p>将vuex中存储的文件列表生成一个文件字典</p>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>文件字典</span></div><code class="language-js"><span class="token comment">/**
 * 文件分类函数
 */</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"../store"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Classifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 文件分类存储字典</span>
    <span class="token keyword">let</span> fileMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// console.log(item)</span>
        <span class="token comment">// TODO 实现文件分类</span>

        <span class="token comment">// 解析文件路径</span>
        <span class="token keyword">let</span> fileInfo <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fileMap<span class="token punctuation">[</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        fileMap<span class="token punctuation">[</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'saveMap'</span><span class="token punctuation">,</span>fileMap<span class="token punctuation">)</span>

    <span class="token comment">// Object.keys(fileMap).forEach(function (item){</span>
    <span class="token comment">//     console.log(item)</span>
    <span class="token comment">//     console.log(fileMap[item])</span>
    <span class="token comment">// })</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="5-文件列表页面实现"><a href="#5-文件列表页面实现" class="headerlink" title="5 文件列表页面实现"></a>5 文件列表页面实现</h3><blockquote>
<p>主要需求:  文件分类展示;  文件复制\移动分类</p>
</blockquote>
<ul>
<li><p>文件列表使用iview的 List实现</p>
</li>
<li><p>文件类型目录使用iview的Anchor实现</p>
</li>
<li><p>使用第4步生成的文件map,v-for来遍历展示</p>
</li>
<li><p>每类文件都有一个移动按钮和复制按钮</p>
</li>
</ul>
<p><img src="/images/image-20210407222908712.png"></p>
<h3 id="6-同类型文件复制-移动"><a href="#6-同类型文件复制-移动" class="headerlink" title="6 同类型文件复制/移动"></a>6 同类型文件复制/移动</h3><ol>
<li><p>首先选择一个文件夹</p>
</li>
<li><p>根据参数确定处理的文件类型和 处理类型</p>
</li>
<li><p>fs.access创建在选择的文件夹下面新建目标路径</p>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>选择文件夹</span></div><code class="language-js"><span class="token comment">// 打开文件夹移动或复制  opt 1为移动 2为复制</span>
    <span class="token function">openDir</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>opt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>

      <span class="token comment">// 选择文件夹</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> remote<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        properties<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'openFile'</span><span class="token punctuation">,</span><span class="token string">"openDirectory"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 新建文件夹</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>targetPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"类型"</span><span class="token operator">+</span>type<span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetPath<span class="token punctuation">)</span>


      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
      fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果文件不存在，就创建这个文件</span>
          fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"创建文件夹成功"</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token comment">//如果这个文件已经存在，就进入下一个循环</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件夹已经存在"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        that<span class="token punctuation">.</span><span class="token function">moveFile</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span>type<span class="token punctuation">,</span>opt<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>遍历复制或者移动每个文件</p>
<pre class="line-numbers language-js" data-language="js"><div class="caption"><span>复制文件</span></div><code class="language-js"><span class="token comment">/**
     * 移动或复制文件到新文件夹
     * @param targetPath  目标路径
     * @param type  文件类型
     * @param opt   操作类型 1为移动,2位复制
     */</span>
    <span class="token function">moveFile</span><span class="token punctuation">(</span><span class="token parameter">targetPath<span class="token punctuation">,</span>type<span class="token punctuation">,</span>opt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>fileMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> newPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span>that<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>
        <span class="token comment">// 检查文件是否存在</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token comment">// 执行复制操作</span>
          fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果选择的是移动,则把源文件删除</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            that<span class="token punctuation">.</span><span class="token function">successNotify</span><span class="token punctuation">(</span><span class="token string">"移动文件成功!"</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            that<span class="token punctuation">.</span><span class="token function">successNotify</span><span class="token punctuation">(</span><span class="token string">"复制文件成功!"</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          that<span class="token punctuation">.</span><span class="token function">failNotify</span><span class="token punctuation">(</span><span class="token string">"文件已经存在了"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h2 id="学到了什么"><a href="#学到了什么" class="headerlink" title="学到了什么"></a>学到了什么</h2><blockquote>
<ul>
<li><p>electron-vue的基础用法</p>
</li>
<li><p>nodejs对于文件处理的几个函数</p>
</li>
<li><p>iview组件的使用</p>
</li>
</ul>
</blockquote>
<h2 id="哪里不足"><a href="#哪里不足" class="headerlink" title="哪里不足"></a>哪里不足</h2><blockquote>
<ul>
<li><p>electron只用到了初级的用法, 渲染进程和主进程通信都没有用到;</p>
</li>
<li><p>功能只能达到勉强能用的地步, 主要原因在于自己的懒惰和规划的垃圾</p>
</li>
<li><p>只用UI组件,很多地方还是达不到自己想要的形式  没有深入学习</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>博客的开始</title>
    <url>/2021/03/14/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>​    上周通过RSS订阅了不少博客,那么多大神很让我敬佩,印象深刻的比如云风大佬,coolshell,鸟窝等等.  不仅在工作上特别牛逼, 在知识输出上也坚持那么多年, 孜孜不倦.  </p>
<p>​    我虽然是个菜鸡,但也有个成为大牛的梦想. 所以尝试一下写一写技术博客.  其实之前在自己租的腾讯云服务器上,基于halo部署了一个博客, halo是基于springboot的.  但是自己租的服务器太low,打开博客费了老劲,只能用来学习linux,学习docker啥的.  所以今天用hexo部署到了github上. 希望以后能有稳定的产出.  初步希望一个月能写两篇有质量的博客.  加油!!!</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>杂记</tag>
        <tag>感想</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh远程免密登陆</title>
    <url>/2021/05/11/ssh%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<blockquote>
<p> 被登陆服务器为A机器</p>
<p> 客户端机器为B机器</p>
</blockquote>
<ol>
<li><p>B机器执行命令生成公钥和私钥</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>生成的秘钥在用户目录下，例如C:\Users\admin\ .ssh</p>
</li>
<li><p>复制公钥文件内容：id_rsa.pub</p>
</li>
<li><p>A机器同样执行生成ssg-keygen的命令</p>
<blockquote>
<p>在用户目录.ssh目录下创建authorized_keys文件，将第二步复制的内容粘贴到该文件中</p>
</blockquote>
</li>
<li><p>修改A机器上的权限</p>
<ul>
<li>chmod 700 .ssh</li>
<li>chmod 600 authorized_keys</li>
<li>修改StrictModes(/etc/ssh/sshd_config文件中)项必须设置成no；</li>
</ul>
</li>
<li><p>测试连接<br>在B机器上命令行输入测试</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh 用户名@A机器ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果没有提示输入密码，直接登录成功，则表示免密登录配置成功！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux使用pyinstaller</title>
    <url>/2021/06/02/linux%E4%BD%BF%E7%94%A8pyinstaller/</url>
    <content><![CDATA[<h3 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><p><a href="https://www.pyinstaller.org/downloads.html">Downloads — PyInstaller bundles Python applications</a></p>
<p>下载</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://github.com/pyinstaller/pyinstaller/releases/download/v4.2/PyInstaller-4.2.tar.gz

tar -xvf PyInstaller-4.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>build</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd pyinstaller-4.2

python3 setup.py build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>



<p>install</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo python3 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>测试是否安装成功</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pyinstaller --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="打包python项目"><a href="#打包python项目" class="headerlink" title="打包python项目"></a>打包python项目</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pyinstaller -F program_exporter.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2+tailwind+elementui+axios项目搭建</title>
    <url>/2021/06/02/vue2-tailwind-elementui-axios%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="nodejs-amp-npm"><a href="#nodejs-amp-npm" class="headerlink" title="nodejs&amp;npm"></a>nodejs&amp;npm</h3><blockquote>
<p>nodejs是javescript代码运行的基础</p>
<p>npm是nodejs的包管理管理工具，前端开发用到的第三方包都可以用它来安装</p>
</blockquote>
<p>安装可以参考 <strong><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528">安装Node.js和npm - 廖雪峰的官方网站 (liaoxuefeng.com)</a></strong></p>
<p>运行如下两条命令如果看到正确的输出结果，证明已经安装成功</p>
<pre class="line-numbers language-none"><code class="language-none">node -v
npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h3><blockquote>
<p>vue是尤雨溪大神写的一个前端框架，可以快速的完成前端开发</p>
<p>虽然vue3已经发布了，但是新的版本可能有些第三方组件没有适配，出现问题也不好查到，建议还是使用二代</p>
</blockquote>
<p>使用npm安装vue2</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install vue-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>验证vue2是否安装成功: 输出版本即可证明安装成功  （<strong>这里的版本是vue-cli的版本</strong>）</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">vue -V<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="创建vue2项目"><a href="#创建vue2项目" class="headerlink" title="创建vue2项目"></a>创建vue2项目</h3><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">vue init webpack my_vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>接下来会要求输入一些创建项目的选项</p>
<ul>
<li><p>？ Project name（my_vue）  </p>
<blockquote>
<p>项目名。  直接敲回车使用默认名字， 或者自己输入项目名</p>
</blockquote>
</li>
<li><p>？Project Description</p>
<blockquote>
<p>项目描述。  </p>
</blockquote>
</li>
<li><p>？ Author</p>
<blockquote>
<p>项目作者</p>
</blockquote>
</li>
<li><p>?  Vue build</p>
<blockquote>
<p>敲回车，选择默认选项</p>
</blockquote>
</li>
<li><p>？Install vue-router</p>
<blockquote>
<p>是否安装vue-router.  这是vue的路由管理组件，输入Y安装</p>
</blockquote>
</li>
<li><p>? Use EsLint to lint yourcode</p>
<blockquote>
<p>EsLint是用来使用ES6的语法标准来规范代码。<br>如果自己的代码很不规范的话，建议使用。  </p>
<p>个人不建议使用</p>
</blockquote>
</li>
<li><p>？ Set up unit tests</p>
<blockquote>
<p>是否设置单元测试。 一般不选，输入n</p>
</blockquote>
</li>
<li><p>Setup e2e tests with Nightwatch?   </p>
<blockquote>
<p>不选</p>
</blockquote>
</li>
<li><p>Should we run <code>npm install</code> for you after the project has been created? (recommended)</p>
<blockquote>
<p>项目创建后是否使用npm install 进行组件的安装，  选择是</p>
</blockquote>
</li>
</ul>
<p>最后等待一会儿，项目就创建好啦！</p>
<p>命令行cd到项目目录； </p>
<p>运行npm run dev，可以看到项目运行的url</p>
<p>打开浏览器输入该url，就可以看到项目的初始样子了：</p>
<p><img src="/images/image-20210525132241052.png"></p>
<h3 id="项目目录说明"><a href="#项目目录说明" class="headerlink" title="项目目录说明"></a>项目目录说明</h3><ul>
<li><p>build  </p>
<blockquote>
<p>项目构建的配置，一般不用动</p>
</blockquote>
</li>
<li><p>config</p>
<blockquote>
<p>项目的一些配置。</p>
<p><strong>特别注意：</strong>如果在开发过程中需要修改项目运行的ip或者端口号，可以修改config/index.js中的配置<br><img src="/images/image-20210525132646932.png"></p>
</blockquote>
</li>
<li><p>node_modules</p>
<blockquote>
<p>用到的组件库，不用管</p>
</blockquote>
</li>
<li><p><strong>src  工程主目录</strong></p>
<ul>
<li><p>assets</p>
<blockquote>
<p>项目用到的静态资源，比如图片、css文件等等</p>
</blockquote>
</li>
<li><p>components</p>
<blockquote>
<p>vue组件，可以理解为一个个页面。初始会有一个HelloWorld.vue，也就是我们刚开始在浏览器中见到的页面</p>
<p><strong>页面不一定要放到该目录中，可以自己新建文件夹</strong></p>
</blockquote>
</li>
<li><p>router</p>
<blockquote>
<p>vue的路由信息</p>
</blockquote>
</li>
<li><p>App.vue</p>
<blockquote>
<p>项目的入口。</p>
<p>简单解释一下：我们写好网站之后，进入网站，就相当于进入了一个App，类似一个安卓或者苹果应用</p>
<p>定义了一些样式，在写项目的时候一般要修改掉</p>
</blockquote>
</li>
<li><p>main.js  <strong>重要</strong></p>
<blockquote>
<p>定义了项目的入口</p>
<p>项目用到的组件需要在此注册</p>
<p>后续会多次用到main.js</p>
</blockquote>
</li>
</ul>
</li>
<li><p>static</p>
<blockquote>
<p>静态资源目录</p>
<p>比如网站在浏览器页签显示的角标，可以放在这里面</p>
</blockquote>
</li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>​    推荐使用webstorm.  安装和破解方法在此不再赘述。</p>
<p>​    当然很多人也喜欢vscode，安装、配置使用可以自行百度。</p>
<h2 id="组件的安装与使用"><a href="#组件的安装与使用" class="headerlink" title="组件的安装与使用"></a>组件的安装与使用</h2><h3 id="vue-router的使用"><a href="#vue-router的使用" class="headerlink" title="vue-router的使用"></a>vue-router的使用</h3><blockquote>
<p>vue-router定义网站的路由跳转信息。 下面以一个案例来说明vue-router的使用</p>
<p>假设我们的ip 和端口分别是 localhost:8080</p>
</blockquote>
<h4 id="简单路由实现"><a href="#简单路由实现" class="headerlink" title="简单路由实现"></a>简单路由实现</h4><ol>
<li><p>创建新页面<br>在components中创建几个页面，即 .vue文件：</p>
<ul>
<li>First.vue</li>
<li>Second.vue</li>
</ul>
<p>修改文件内容，用来标识文件</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;					&lt;!--最外层一定要有一个容器，一般用div--&gt;
    &lt;h1&gt;First页面&lt;/h1&gt;  &lt;!--second修改这里就好--&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: "Second"
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改配置router/index.js</p>
<blockquote>
<p>想要在浏览器中看到我们新建的页面，就要在路由中定义相关页面的路由</p>
</blockquote>
<p>先看最初始的路由内容：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span>
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span> <span class="token comment">//引用HelloWorld页面</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>     			<span class="token comment">// 页面路径，即'Ip:端口/' </span>
      name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>		<span class="token comment">// 路由名字，必须唯一</span>
      component<span class="token operator">:</span> HelloWorld  	<span class="token comment">// 路径对应的页面</span>
      <span class="token comment">// 下面这种写法，也能够引用页面，不需要在上面引用，注意后面的.vue后缀不能省略</span>
      <span class="token comment">//component: () =&gt; import("../components/HelloWorld.vue"),</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 新的路由信息在这个地方添加</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上新写的两个页面路由后，变成如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//mode: 'history'，   // 加入这一行可以取消url中的 # 号 </span>
routes<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>
    component<span class="token operator">:</span> HelloWorld
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span><span class="token string">'/first'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'First'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/First.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// first页面</span>
    meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'First'</span><span class="token punctuation">}</span>   <span class="token comment">// 这里是定义路由的元信息，属于自定义内容</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    path<span class="token operator">:</span><span class="token string">'/second'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'Second'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Second.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// second页面</span>
    meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'First'</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>url说明：加入mode: ‘history’这一行可以取消url中的#号，参考<a href="https://blog.csdn.net/qq_34911465/article/details/79405796"> vue-router 路由模式及url中#号的解析</a></p>
<p>也就是是说，加了这一行，你的url就是：</p>
<ul>
<li><a href="http://localhost:8080/first">http://localhost:8080/first</a></li>
<li><a href="http://localhost:8080/second">http://localhost:8080/second</a></li>
</ul>
<p>不加的话，就是：</p>
<ul>
<li><a href="http://localhost:8080/#/first">http://localhost:8080/#/first</a></li>
<li><a href="http://localhost:8080/#/second">http://localhost:8080/#/second</a></li>
</ul>
<p>现在npm run dev启动项目，查看这两个，发现多了一个vue的logo。前面提到过，App.vue中的内容会影响其他所有页面，因此我们对App.vue进行修改</p>
</li>
<li><p>修改App.vue<br>主要修改两个地方</p>
</li>
</ol>
<ul>
<li>img  删掉</li>
<li>margin-top的样式 改为0 或者删掉</li>
</ul>
<p>  现在重新打开页面查看，发现已经ok啦！</p>
<ol start="4">
<li><p>兄弟路由</p>
<blockquote>
<p>兄弟路由即两个同级别的路由，两个页面不会互相嵌套</p>
</blockquote>
<p>上面的first second页面就是两个兄弟页面</p>
</li>
</ol>
<h4 id="父子路由"><a href="#父子路由" class="headerlink" title="父子路由"></a>父子路由</h4><blockquote>
<p>父子路由也可以称之为嵌套路由. 在网站中非常常见。</p>
<p>下面演示用法</p>
</blockquote>
<ul>
<li><p>创建两个‘儿子’页面 Son1.vue  和Son2.vue，内容如下</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;子页面1&lt;/h1&gt;  &lt;!--Son2.vue 这里改成 子页面2--&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: "Son1"
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>创建父组件 Father.vue</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;div style="text-align: center"&gt;   &lt;!-- 简单设置样式为居中 --&gt;
      &lt;router-link to="/son1"&gt;
        &lt;button&gt;前往子页面1&lt;/button&gt;
      &lt;/router-link&gt;
      &lt;router-link to="/son2"&gt;
        &lt;button&gt;前往子页面2&lt;/button&gt;
      &lt;/router-link&gt;
    &lt;/div&gt;

    &lt;div&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: "Father"
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p>router-link   </p>
<blockquote>
<p>此标签用来进行路由跳转， to关键字定义要跳转的路由路径，只需要填写ip:port后面的路径</p>
<p>在浏览器点击标签内的内容就可以前往相应的页面</p>
</blockquote>
</li>
<li><p>router-view</p>
<blockquote>
<p>该标签定义了一个槽位，子页面将会嵌套到这里</p>
</blockquote>
</li>
</ul>
</li>
<li><p>路由定义</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span>
 <span class="token punctuation">{</span>
      path<span class="token operator">:</span><span class="token string">'/father'</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">'Father'</span><span class="token punctuation">,</span>
      <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Father.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'父页面'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      children<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          path<span class="token operator">:</span><span class="token string">'/son1'</span><span class="token punctuation">,</span>
          name<span class="token operator">:</span> <span class="token string">'Son1'</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Son1.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'子页面1'</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          path<span class="token operator">:</span><span class="token string">'/son2'</span><span class="token punctuation">,</span>
          name<span class="token operator">:</span> <span class="token string">'Son2'</span><span class="token punctuation">,</span>
          <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Son2.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'子页面2'</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意子页面的路由信息是放在父页面的children属性下的，这是父子组件必须有的路由结构</p>
</li>
<li><p>现在打开url   <a href="http://localhost:8080/father">http://localhost:8080/father</a>  点击两个按钮是不是可以切换子页面啦？  并且父组件定义的按钮还在页面上，证明嵌套成功！</p>
</li>
</ul>
<h4 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h4><blockquote>
<p>在进行路由跳转的时候，有时要对路由进行判断，比如根据跳转修改页面的标题，身份验证、或者错误的路由导入重定向到指定的页面等等</p>
<p>下面演示一下路由守卫是如何修改页面标题的</p>
</blockquote>
<p>修改main.js 如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span>
<span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span>

Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token comment">// 这里是添加的路由守卫</span>
router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span><span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">/* eslint-disable no-new */</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  router<span class="token punctuation">,</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>beforeEach在每次路由跳转前会执行，（同样也有afterEach，在每次路由跳转后执行）。 参数说明</p>
<ul>
<li><p>to： 跳转前的路由对象，也就是我们在router/index.js中定义的路由信息。<br>加入我们从son1页面跳转到son2页面，那么to的内容就是：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">{</span>
    path<span class="token operator">:</span><span class="token string">'/son1'</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'Son1'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/Son1.vue"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    meta<span class="token operator">:</span> <span class="token punctuation">{</span>title<span class="token operator">:</span><span class="token string">'子页面1'</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>from: 跳转后的路由对象</p>
</li>
<li><p>next()  因为beforeEach相当于在路由跳转过程中插入了一段代码，因此必须调用next()才能继续执行跳转</p>
</li>
</ul>
<p>这里我们用了我们自定义的路由信息来修改页面的标题。 打开浏览器，测试两个子页面的切换，发现已经成功修改了页面标题</p>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><blockquote>
<p>前端主要是用来展示的，但是没有数据展示什么呢？ 这就需要网络模块了。</p>
<p>axios是一个封装的很好的HTTP库，有了它，我们就可以使用http协议向后端请求数据，或者传输数据</p>
</blockquote>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install axios --save   // 朴实无华的安装命令，注意要在项目目录下，也就是src同级目录下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote>
<p>想要更傻瓜式的使用axios，我们需要进行简单的封装，此处查看注释了解各处的功能即可</p>
</blockquote>
<p>我们在src下新建文件夹http</p>
<p>创建request.js文件，写入如下内容</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  baseURL <span class="token operator">:</span> <span class="token string">"https://v1.alapi.cn"</span><span class="token punctuation">,</span>  <span class="token comment">// 因为我们没有后端，这里写一个第三方免费接口的地址</span>
  timeout <span class="token operator">:</span> <span class="token number">10000</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>

instance<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/json;charset=UTF-8'</span><span class="token punctuation">;</span> <span class="token comment">// poset请求的头部信息</span>

<span class="token comment">// 请求拦截器</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每次发送请求之前判断vuex中是否存在token</span>
    <span class="token comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span>
    <span class="token comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span>
    <span class="token comment">// const token = store.state.token;</span>
    <span class="token comment">// (config.headers.Authorization = token);</span>
    <span class="token comment">// console.log(config)</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>


<span class="token comment">// 响应拦截器</span>
instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span>
    <span class="token comment">// 否则的话抛出错误</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 服务器状态码不是2开头的的情况</span>
  <span class="token comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span>
  <span class="token comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span>
  <span class="token comment">// 下面列举几个常见的操作，其他需求可自行扩展</span>
  <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>


<span class="token comment">/**
 * get方法，对应get请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    instance<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      params<span class="token operator">:</span> params
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>

<span class="token comment">/**
 * post方法，对应post请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在同目录下创建api.js</p>
<p>将后端的接口变成前端的一个个方法，然后就可以在vue页面组件中引用这些方法</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>get<span class="token punctuation">,</span>post<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./request"</span><span class="token punctuation">;</span>

<span class="token comment">// 第三方的免费接口，用来知乎日报</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">GetZhihuDaily</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/zhihu/latest"</span><span class="token punctuation">,</span>param<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>我们在son1页面中演示一下上面这个接口的使用</p>
<p>先看修改后的文件，再来一一说明：</p>
<pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;
  &lt;div&gt;
    &lt;h1&gt;子页面1&lt;/h1&gt;

    &lt;div v-for="item in myData"&gt;  &lt;!--7.渲染api获取的数据到页面中-&gt; 
      &lt;h4&gt;{{item.title}}&lt;/h4&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import {GetZhihuDaily} from "../http/api";  // 1.引用请求方法

export default {
  name: "Son1",
  data(){ // 组件中的数据都会存在data中
    return{
      myData:[],   // 2.定义一个数组用来保存我们请求的来的数据
    }
  },

  created() { // 每次重新打开页面时，created中的代码会执行
    this.FetchData()  // 6.请求数据
  },

  methods:{ // 方法必须放在method中，包括网络请求，点击事件等等
    FetchData(){    // 3. 定义一个新方法，在方法中发送网络请求
      GetZhihuDaily().then(res=&gt;{ // 4. 调用网络请求方法
        console.log(res)
        if(res.code===200){ // 判断请求是否成功
          this.myData = res.data.stories  // 5.将网络请求来的数据保存在mydata中，这里的stories是这个api数据特有的
        }
      })
    }
  }
}
&lt;/script&gt;

&lt;style scoped&gt;

&lt;/style&gt;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>具体步骤已经写在了代码注释中，下面对几个步骤再做进一步的解释</p>
<ol>
<li>没什么好说的，要用就要引入，否则报错</li>
<li>这是vue的规则，数据要写在data函数中，{}括号包含的就是当前组件拥有的变量，可以使用 <strong>this.变量名</strong> 获取</li>
<li>methods也是vue的规则，在其中定义新方法，同样通过 <strong>this.方法名</strong> 调用</li>
<li>调用了我们的网络请求方法。 因为axios网络请求是<strong>异步</strong>的，因此要在then中定义方法，用来处理请求成功后的事件，这里我们使用了箭头函数，res代表的就是网络请求返回的数据，我们首先判断请求是否成功，然后把数据赋值给我们的变量</li>
<li>略</li>
<li>定义了方法后，还需要调用，可以通过点击事件、也可以通过生命周期函数。  created就是vue的一个周期函数(<a href="https://segmentfault.com/a/1190000011381906">详解vue生命周期 - SegmentFault 思否</a>),会在每次重新打开页面时执行。</li>
<li>因为我们的数据是一个数组，所以选择v-for（<a href="https://blog.csdn.net/amyleeYMY/article/details/84940020">vue2之v-for详解</a>）来遍历渲染数据</li>
</ol>
<p>最后打开页面，可以看到数据已经成功获取并渲染到页面上啦： （如果没有获取到的话，请F12 - network . 刷新页面看看网络请求成功发送）</p>
<p><img src="/images/image-20210527104748364.png"></p>
<h3 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h3><blockquote>
<p>经过上面的操作步骤，我们已经成功获得数据并渲染到了页面上。 但一个大问题，我们的页面太丑了。 前端一般使用css来修改样式的，但是css比较复杂，学习成本也比较高。 我们需要傻瓜式的ui组件。 好在很多开源的工具我们都可以拿来用，比如Vuetify 、 Vue Material、Element UI、Buefy 、Quasar 、Bootstrap Vue 等等。  我们这里以<a href="https://element.eleme.cn/#/zh-CN/component/installation"> Element</a>来举例，它是由饿了么前端团队开发的UI组件库</p>
</blockquote>
<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm install element-ui --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在main.js中引用并使用配置elmentui</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span>            <span class="token comment">// 引用组件库</span>
<span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>  <span class="token comment">//引用样式</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span> <span class="token comment">// 在vue中注册使用组件库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><p>在father中，将第一个按钮修改一下。 即把button改成el-button</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span><span class="token punctuation">&gt;</span></span>前往子页面1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打开页面，可以看到按钮变成了elementui定义的样式：</p>
<p><img src="/images/image-20210527115242944.png"></p>
<p>当然，还有很多elementui组件的样式和功能，请参照官方文档进行使用</p>
<h3 id="tailwindcss"><a href="#tailwindcss" class="headerlink" title="tailwindcss"></a>tailwindcss</h3><blockquote>
<p>有时发现elementui的样子并不是我们想要的，并且很难修改。想要自己写样式，但又懒得学css。 这时就可以使用tailwindcss，它封装了非常多的样式，可以直接以class的形式定义组件的样式</p>
</blockquote>
<h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><blockquote>
<p> 参考<a href="https://fpjs.fun/tailwind/general/vue2-tailwind1/">Vue 2 安裝 Tailwind CSS 1 | 點燈坊 (fpjs.fun)</a></p>
<p> 注意vue2必须指定如下版本，否则用不了</p>
</blockquote>
<ol>
<li>安装</li>
</ol>
<pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install tailwindcss@1.9.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>在src/assets中创建css/tailwind.css, 写入如下内容</li>
</ol>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li><p>运行如下命令</p>
<pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npx tailwindcss init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在项目目录下生成了一个tailwind.config.js文件</p>
</li>
<li><p>修改tailwind.config.js</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  future<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// removeDeprecatedGapUtilities: true,</span>
    <span class="token comment">// purgeLayersByDefault: true,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  purge<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">'./src/**/*.html'</span><span class="token punctuation">,</span>
    <span class="token string">'./src/**/*.vue'</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  theme<span class="token operator">:</span> <span class="token punctuation">{</span>
    extend<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  variants<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在项目目录下创建<strong>postcss.config.js</strong> 文件，内容如下</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'tailwindcss'</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改根目录下的.postcssrc.js 为如下内容</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string">"plugins"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'tailwindcss'</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>在main.js中配置使用tailwindcss</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'@/assets/css/tailwind.css'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><p>再次修改Father.vue,这次修改另一个按钮为如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-pink-500 text-white px-4 py-4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>前往子页面2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>class中定义了4个内容</p>
<ul>
<li>bg-pink-500  定义背景色为pink-500</li>
<li>text-white  定义字体颜色为白色</li>
<li>px-4  定义左右内边距为4</li>
<li>py-2  定义上下内边距为2</li>
<li>shadow-md   定义按钮的阴影</li>
<li>rounded-2xl  定义按钮的圆角</li>
</ul>
<p>效果如下</p>
<p><img src="/images/image-20210527122422292.png"></p>
<p>更多丰富的用法请参考<a href="https://www.tailwindcss.cn/docs">中文文档 - Tailwind CSS 中文文档</a></p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><blockquote>
<p>这是vue的全局状态组件，也就是全局变量组件。 在项目中可能存在一些全局变量，使用vuex就可以方便的获取、同步修改、异步修改这些变量</p>
</blockquote>
<h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><p>安装命令：(–save的作用是将组件安装到当前项目中，而不是全局。 下同)</p>
<pre class="line-numbers language-none"><code class="language-none">npm install vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在项目目录/src下新建文件夹/store，并在文件夹下创建多个文件</p>
<ul>
<li>store.js  vuex的主要程序</li>
<li>states.js  在这里定义全局变量</li>
<li>getters.js  在这里定义全局变量的获取方法</li>
<li>mutations  在这里定义全局变量的同步操作方法</li>
<li>actions 在这里定义全局变量的异步操作方法</li>
</ul>
<h4 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h4><ol>
<li><p>首先在states中定义一个全局变量</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> state <span class="token operator">=</span>  <span class="token punctuation">{</span>
    count<span class="token operator">:</span><span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在getters中定义获取count变量的方法</p>
<pre class="line-numbers language-none"><code class="language-none">const getters =  {
    docount:(state,getters) =&gt; {
        return state.count
    }
}
export default getters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在mutations中添加如下内容</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>count <span class="token operator">=</span> v<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>count <span class="token operator">+=</span> v
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>count <span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">reduceCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>count <span class="token operator">-=</span> v
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            state<span class="token punctuation">.</span>count <span class="token operator">--</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> mutations<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改actions内容,  可以看到其中可以加入异步内容，我们这里没有使用</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">ADD_COUNT</span><span class="token punctuation">(</span><span class="token parameter">vuex<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// axios.get("/customer/user_info").then(res =&gt; {</span>
        <span class="token comment">//     commit(TYPES.SET_COUMT, res.data);</span>
        <span class="token comment">// });</span>
        vuex<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addCount"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token constant">REDUCE_COUNT</span><span class="token punctuation">(</span><span class="token parameter">vuex<span class="token punctuation">,</span>num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// axios.get("/customer/user_info").then(res =&gt; {</span>
        <span class="token comment">//     commit(TYPES.SET_COUMT, res.data);</span>
        <span class="token comment">// });</span>
        vuex<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"reduceCount"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> actions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>在store中引入以上组件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>

<span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"./states"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">"./getters"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"./mutations"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"./actions"</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改main.js引入vuex</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store/store"</span><span class="token punctuation">;</span>  <span class="token comment">// 引入vuex</span>

<span class="token comment">/* eslint-disable no-new */</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span>   <span class="token comment">// 加入这一行</span>
  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>
  template<span class="token operator">:</span> <span class="token string">'&lt;App/&gt;'</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>下面演示我们如何在网页中使用定义的count全局变量</p>
<p>方案： 在Father中获取并展示count变量； 在子页面1中执行count+1，在子页面2中执行count-1</p>
<ol>
<li><p>修改Father.vue<br>获取count值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">computed<span class="token operator">:</span><span class="token punctuation">{</span>   <span class="token comment">// computed中的函数必须有返回值，vuex会实时更新这个值</span>
    <span class="token function">myCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>docount<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>docount
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>展示count值</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-blue-400 py-2 text-4xl text-white mx-auto my-2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  {{myCount}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li><p>修改Son1.vue<br>添加一个方法，用来增加count的值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 修改vuex中的变量值</span>
<span class="token function">AddCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'ADD_COUNT'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加一个按钮用于触发这个方法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AddCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>修改Son2.vue<br>添加一个方法，用来增加count的值</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 修改vuex中的变量值</span>
   <span class="token function">AddCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'ADD_COUNT'</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加一个按钮用于触发这个方法</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>danger<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ReduceCount<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>reduce count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>现在可以打开网页测试一下啦</p>
<p><img src="/images/image-20210527201535270.png"></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre class="line-numbers language-none"><code class="language-none">npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打包后，项目目录下会出现一个dist目录，这个就是我们打包的结果</p>
<h2 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h2><blockquote>
<p>前端编译后的结果最后还是要部署到服务器上才行，我们打包得到dist后，如何去访问网站呢？ 直接打开dist/index.html可以看到并不能打开我们的网站。 还是需要部署在nginx服务器才行。</p>
</blockquote>
<h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><ul>
<li><a href="https://www.jianshu.com/p/d2f30962e8ce">win10 上 安装 nginx - 简书 (jianshu.com)</a></li>
<li><a href="https://blog.csdn.net/t8116189520/article/details/81909574">(3条消息) LINUX安装nginx详细步骤_大蛇王的博客-CSDN博客_linux安装nginx</a></li>
</ul>
<h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><p>nginx配置是很重要的一步。</p>
<p>以win10为例，在nginx安装目录下找到conf/nginx.conf，这就是我们要配置的文件</p>
<p>我们在http{}中添加如下内容</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server {
    listen       8888;					# 访问端口
    server_name  你的ip:8888;		# 因为没有域名，所以这里是你的ip：端口

    #charset koi8-r;

    #access_log  logs/host.access.log  main;

    location / {
        root   D:\app\my_vue\dist; 		# 指向我们打包后的目录
        index  index.html index.htm;	

        try_files $uri $uri/ /index.html;  # 没有这一行，可能会报404错误
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>启动nginx</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">start nginx.exe <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>打开浏览器  http://你的ip:8888/father</p>
<p>成功！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上的内容只是我个人的前端开发经验，有些步骤也许并不标准，但应该也是有用的。</p>
<p>虽然尽可能写的详细点，还是可能有疏漏。 欢迎交流。</p>
<p>最后的页面那么丑，主要是本人不擅长设计，这也不是本文的主要目的，见谅。</p>
<p>另外关于vue的学习资料（都是我用过的）：</p>
<p>视频教程</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV12J411m7MG">https://www.bilibili.com/video/BV12J411m7MG</a>   </li>
</ul>
<p>资料</p>
<ul>
<li><p><a href="https://github.com/rumengkai/awesome-vue">rumengkai/awesome-vue: Vue相关开源项目库汇总 (github.com)</a></p>
</li>
<li><p><a href="https://github.com/kon9chunkit/GitHub-Chinese-Top-Charts#Vue">kon9chunkit/GitHub-Chinese-Top-Charts: GitHub中文排行榜，帮助你发现高分优秀中文项目、更高效地吸收国人的优秀经验成果；榜单每周更新一次，敬请关注！</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
