<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://fanlu1994.github.io/atom.xml" rel="self"/>
  
  <link href="https://fanlu1994.github.io/"/>
  <updated>2021-06-02T15:30:38.219Z</updated>
  <id>https://fanlu1994.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux使用pyinstaller</title>
    <link href="https://fanlu1994.github.io/2021/06/02/linux%E4%BD%BF%E7%94%A8pyinstaller/"/>
    <id>https://fanlu1994.github.io/2021/06/02/linux%E4%BD%BF%E7%94%A8pyinstaller/</id>
    <published>2021-06-02T15:29:43.000Z</published>
    <updated>2021-06-02T15:30:38.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><p><a href="https://www.pyinstaller.org/downloads.html">Downloads — PyInstaller bundles Python applications</a></p><p>下载</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://github.com/pyinstaller/pyinstaller/releases/download/v4.2/PyInstaller-4.2.tar.gztar -xvf PyInstaller-4.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>build</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd pyinstaller-4.2python3 setup.py build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>install</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo python3 setup.py install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试是否安装成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pyinstaller --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打包python项目"><a href="#打包python项目" class="headerlink" title="打包python项目"></a>打包python项目</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pyinstaller -F program_exporter.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装pyinstaller&quot;&gt;&lt;a href=&quot;#安装pyinstaller&quot; class=&quot;headerlink&quot; title=&quot;安装pyinstaller&quot;&gt;&lt;/a&gt;安装pyinstaller&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.pyins</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vue3+tailwind+axios前端项目搭建</title>
    <link href="https://fanlu1994.github.io/2021/05/11/vue3-tailwind-axios%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    <id>https://fanlu1994.github.io/2021/05/11/vue3-tailwind-axios%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</id>
    <published>2021-05-11T13:10:34.000Z</published>
    <updated>2021-05-11T13:10:34.806Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ssh远程免密登陆</title>
    <link href="https://fanlu1994.github.io/2021/05/11/ssh%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/"/>
    <id>https://fanlu1994.github.io/2021/05/11/ssh%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</id>
    <published>2021-05-11T13:05:55.000Z</published>
    <updated>2021-05-11T13:08:32.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 被登陆服务器为A机器</p><p> 客户端机器为B机器</p></blockquote><ol><li><p>B机器执行命令生成公钥和私钥</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的秘钥在用户目录下，例如C:\Users\admin\ .ssh</p></li><li><p>复制公钥文件内容：id_rsa.pub</p></li><li><p>A机器同样执行生成ssg-keygen的命令</p><blockquote><p>在用户目录.ssh目录下创建authorized_keys文件，将第二步复制的内容粘贴到该文件中</p></blockquote></li><li><p>修改A机器上的权限</p><ul><li>chmod 700 .ssh</li><li>chmod 600 authorized_keys</li><li>修改StrictModes(/etc/ssh/sshd_config文件中)项必须设置成no；</li></ul></li><li><p>测试连接<br>在B机器上命令行输入测试</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ssh 用户名@A机器ip地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有提示输入密码，直接登录成功，则表示免密登录配置成功！</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt; 被登陆服务器为A机器&lt;/p&gt;
&lt;p&gt; 客户端机器为B机器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;B机器执行命令生成公钥和私钥&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-cmd&quot; data-l</summary>
      
    
    
    
    
    <category term="linux" scheme="https://fanlu1994.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>electron学习:实现一个文件分类器</title>
    <link href="https://fanlu1994.github.io/2021/03/29/electron%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://fanlu1994.github.io/2021/03/29/electron%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%99%A8/</id>
    <published>2021-03-29T13:45:48.000Z</published>
    <updated>2021-04-07T14:47:30.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><a href="https://github.com/FanLu1994/file_arranger">文件分类器</a></li></ul><h2 id="sunny-动机"><a href="#sunny-动机" class="headerlink" title=":sunny:动机"></a><span class="github-emoji"><span>☀</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>动机</h2><p>因为喜欢看电子书,之前都用多看,但是没有花钱买过多看里面的书,会找很多epub的电子书资源.  (现在用微信读书了,蛮香的,都是正版,而且基本不用花钱)</p><p>电子书资源网站现在死的好多,但还是有很多百度网盘的资源. 整理的都很好, 大部分都包含了多种格式的电子书,其中就包括了epub.</p><p>曾经一次性下载了很多百度网盘的电子书资源,epub文件都在各自的文件夹内,要传到多看上的话就要一次次的打开所有文件夹.  很烦,当时写了一个小脚本,如下:</p><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python提取epub</span></div><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> shutildir_path <span class="token operator">=</span> <span class="token string">"D:\BaiduNetdiskDownload"</span>epub_path <span class="token operator">=</span> <span class="token string">"D:\BaiduNetdiskDownload\epub"</span><span class="token keyword">for</span> path<span class="token punctuation">,</span>dir_list<span class="token punctuation">,</span>file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> file_name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".epub"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">)</span>            old_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>            new_file_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>epub_path<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span>            shutil<span class="token punctuation">.</span>move<span class="token punctuation">(</span>old_file_path<span class="token punctuation">,</span>new_file_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后来在公司的项目中接触到了vue写前端,也知道了electron这个东西,就决定学习一下,把这个可视化的文件分类器作为一个学习的小项目.  </p><p>功能很简陋,实现也不完美,作为一个入门的小程序,勉勉强强.</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>​    因为是一个非常简单的项目,设计思路也很简单.</p><ol><li>首页用一个输入框点击可以像选择想要处理的文件夹</li><li>将文件夹存储到vuex中</li><li>选择文件夹后,出现处理按钮,点击跳转到文件列表页面</li><li>利用vuex中的文件夹,遍历获取文件夹下面所有文件,构造一个以文件类型为key的map, 作为文件map,也存储到vuex中</li><li>文件列表页面分类展示所有文件</li><li>每一类文件都有复制和移动功能</li><li>复制/移动允许用户选择一个文件夹,在该文件夹下面新建一个文件,以文件类型为文件名, 根据按钮,将相同类型文件复制或者移动到新文件夹</li><li>结束</li></ol><h2 id="框架选择"><a href="#框架选择" class="headerlink" title="框架选择"></a>框架选择</h2><p>因为在公司的项目中使用的是vue+elementui来写前端。 因此想要找一个同样支持vue的electron现有框架来写。 在github上找到了<a href="https://github.com/SimulatedGREG/electron-vue%EF%BC%8C%E6%84%9F%E8%A7%89%E5%BE%88%E5%A5%BD%E7%94%A8%E3%80%82">https://github.com/SimulatedGREG/electron-vue，感觉很好用。</a></p><p>在UI库方面，用过element-ui，已经是很好用的一个库了。 但是想试试别的，一开始选择了bulma，后来在开发过程中，觉得这个不够“傻瓜式”，于是又引入了iview。</p><p>最终选择：</p><ol><li><a href="https://github.com/SimulatedGREG/electron-vue">electron-vue</a></li><li><a href="https://bulma.zcopy.site/documentation/overview/">bulma</a></li><li><a href="https://www.iviewui.com/docs/introduce">iviewui</a></li></ol><h2 id="loudspeaker-具体实现"><a href="#loudspeaker-具体实现" class="headerlink" title=":loudspeaker:具体实现"></a><span class="github-emoji"><span>📢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>具体实现</h2><h3 id="1-首页实现"><a href="#1-首页实现" class="headerlink" title="1 首页实现"></a>1 首页实现</h3><p>​    首页需求很简单，只要一个输入框，用来选择文件夹，然后将文件夹存储到vuex, 并根据文件夹,获取所有文件列表,存储到vuex</p><p>​    实现界面如下：</p><p><img src="/2021/03/29/electron%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%99%A8/app\fanlu1994.github.io\source_posts\electron学习-实现一个文件分类器.assets\cGgbwT" alt="首页"></p><h3 id="2-文件夹选择"><a href="#2-文件夹选择" class="headerlink" title="2 文件夹选择"></a>2 文件夹选择</h3><ul><li>remote.dialog.showOpenDialog是electon提供的对话框函数</li></ul><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>选择文件夹</span></div><code class="language-js"><span class="token comment">//打开文件夹    </span><span class="token function">openDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> remote<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        properties<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'openFile'</span><span class="token punctuation">,</span><span class="token string">"openDirectory"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dir <span class="token operator">=</span> result    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//将文件夹路径设置为全局状态</span>    <span class="token function">setPath</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'ChangePath'</span><span class="token punctuation">,</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllFile</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 获取所有文件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'saveList'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>filesArray<span class="token punctuation">)</span> <span class="token comment">//存储到vuex</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文件目录扫描"><a href="#3-文件目录扫描" class="headerlink" title="3 文件目录扫描"></a>3 文件目录扫描</h3><p>​    使用nodejs的fs模块和path模块</p><ul><li>fs.stat()  给定路径,获取文件信息</li><li>path.join()  路径和文件名生成完整路径</li></ul><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>文件目录保存</span></div><code class="language-js"> <span class="token comment">// 获取文件夹下所有文件</span><span class="token function">getAllFile</span><span class="token punctuation">(</span><span class="token parameter">targetPath</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> that  <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>files</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 遍历当前path下所有文件</span>                <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>                fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stats</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 判断文件是否是文件夹</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        <span class="token keyword">let</span> isFile <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">let</span> isDir <span class="token operator">=</span> stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>isFile<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token comment">// console.log(filename)</span>                            that<span class="token punctuation">.</span>filesArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>   <span class="token comment">//递归处理文件夹</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                            that<span class="token punctuation">.</span><span class="token function">getAllFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-文件字典生成"><a href="#4-文件字典生成" class="headerlink" title="4 文件字典生成"></a>4 文件字典生成</h3><p>将vuex中存储的文件列表生成一个文件字典</p><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>文件字典</span></div><code class="language-js"><span class="token comment">/** * 文件分类函数 */</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"../store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Classifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 文件分类存储字典</span>    <span class="token keyword">let</span> fileMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// console.log(item)</span>        <span class="token comment">// TODO 实现文件分类</span>        <span class="token comment">// 解析文件路径</span>        <span class="token keyword">let</span> fileInfo <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fileMap<span class="token punctuation">[</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        fileMap<span class="token punctuation">[</span>fileInfo<span class="token punctuation">.</span>ext<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'saveMap'</span><span class="token punctuation">,</span>fileMap<span class="token punctuation">)</span>    <span class="token comment">// Object.keys(fileMap).forEach(function (item){</span>    <span class="token comment">//     console.log(item)</span>    <span class="token comment">//     console.log(fileMap[item])</span>    <span class="token comment">// })</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-文件列表页面实现"><a href="#5-文件列表页面实现" class="headerlink" title="5 文件列表页面实现"></a>5 文件列表页面实现</h3><blockquote><p>主要需求:  文件分类展示;  文件复制\移动分类</p></blockquote><ul><li><p>文件列表使用iview的 List实现</p></li><li><p>文件类型目录使用iview的Anchor实现</p></li><li><p>使用第4步生成的文件map,v-for来遍历展示</p></li><li><p>每类文件都有一个移动按钮和复制按钮</p></li></ul><p><img src="/2021/03/29/electron%E5%AD%A6%E4%B9%A0-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB%E5%99%A8/app\fanlu1994.github.io\source_posts\electron学习-实现一个文件分类器.assets\cGgHmV" alt="文件列表页面"></p><h3 id="6-同类型文件复制-移动"><a href="#6-同类型文件复制-移动" class="headerlink" title="6 同类型文件复制/移动"></a>6 同类型文件复制/移动</h3><ol><li><p>首先选择一个文件夹</p></li><li><p>根据参数确定处理的文件类型和 处理类型</p></li><li><p>fs.access创建在选择的文件夹下面新建目标路径</p><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>选择文件夹</span></div><code class="language-js"><span class="token comment">// 打开文件夹移动或复制  opt 1为移动 2为复制</span>    <span class="token function">openDir</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span>opt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>      <span class="token comment">// 选择文件夹</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> remote<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        properties<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'openFile'</span><span class="token punctuation">,</span><span class="token string">"openDirectory"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment">// 新建文件夹</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>targetPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"类型"</span><span class="token operator">+</span>type<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetPath<span class="token punctuation">)</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果文件不存在，就创建这个文件</span>          fs<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"创建文件夹成功"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment">//如果这个文件已经存在，就进入下一个循环</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"文件夹已经存在"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        that<span class="token punctuation">.</span><span class="token function">moveFile</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>targetPath<span class="token punctuation">,</span>type<span class="token punctuation">,</span>opt<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历复制或者移动每个文件</p><pre class="line-numbers language-js" data-language="js"><div class="caption"><span>复制文件</span></div><code class="language-js"><span class="token comment">/**     * 移动或复制文件到新文件夹     * @param targetPath  目标路径     * @param type  文件类型     * @param opt   操作类型 1为移动,2位复制     */</span>    <span class="token function">moveFile</span><span class="token punctuation">(</span><span class="token parameter">targetPath<span class="token punctuation">,</span>type<span class="token punctuation">,</span>opt</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> that <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fileMap<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> newPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span>that<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span>        <span class="token comment">// 检查文件是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>newPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment">// 执行复制操作</span>          fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>newPath<span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 如果选择的是移动,则把源文件删除</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>opt<span class="token operator">===</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fs<span class="token punctuation">.</span><span class="token function">unlinkSync</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            that<span class="token punctuation">.</span><span class="token function">successNotify</span><span class="token punctuation">(</span><span class="token string">"移动文件成功!"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            that<span class="token punctuation">.</span><span class="token function">successNotify</span><span class="token punctuation">(</span><span class="token string">"复制文件成功!"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          that<span class="token punctuation">.</span><span class="token function">failNotify</span><span class="token punctuation">(</span><span class="token string">"文件已经存在了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="学到了什么"><a href="#学到了什么" class="headerlink" title="学到了什么"></a>学到了什么</h2><blockquote><ul><li><p>electron-vue的基础用法</p></li><li><p>nodejs对于文件处理的几个函数</p></li><li><p>iview组件的使用</p></li></ul></blockquote><h2 id="哪里不足"><a href="#哪里不足" class="headerlink" title="哪里不足"></a>哪里不足</h2><blockquote><ul><li><p>electron只用到了初级的用法, 渲染进程和主进程通信都没有用到;</p></li><li><p>功能只能达到勉强能用的地步, 主要原因在于自己的懒惰和规划的垃圾</p></li><li><p>只用UI组件,很多地方还是达不到自己想要的形式  没有深入学习</p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;项目地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FanLu1994/file_arranger&quot;&gt;文件分</summary>
      
    
    
    
    
    <category term="electron" scheme="https://fanlu1994.github.io/tags/electron/"/>
    
    <category term="javascript" scheme="https://fanlu1994.github.io/tags/javascript/"/>
    
    <category term="学习" scheme="https://fanlu1994.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>博客的开始</title>
    <link href="https://fanlu1994.github.io/2021/03/14/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
    <id>https://fanlu1994.github.io/2021/03/14/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%BC%80%E5%A7%8B/</id>
    <published>2021-03-14T11:55:30.000Z</published>
    <updated>2021-03-14T12:10:01.896Z</updated>
    
    <content type="html"><![CDATA[<p>​    上周通过RSS订阅了不少博客,那么多大神很让我敬佩,印象深刻的比如云风大佬,coolshell,鸟窝等等.  不仅在工作上特别牛逼, 在知识输出上也坚持那么多年, 孜孜不倦.  </p><p>​    我虽然是个菜鸡,但也有个成为大牛的梦想. 所以尝试一下写一写技术博客.  其实之前在自己租的腾讯云服务器上,基于halo部署了一个博客, halo是基于springboot的.  但是自己租的服务器太low,打开博客费了老劲,只能用来学习linux,学习docker啥的.  所以今天用hexo部署到了github上. 希望以后能有稳定的产出.  初步希望一个月能写两篇有质量的博客.  加油!!!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    上周通过RSS订阅了不少博客,那么多大神很让我敬佩,印象深刻的比如云风大佬,coolshell,鸟窝等等.  不仅在工作上特别牛逼, 在知识输出上也坚持那么多年, 孜孜不倦.  &lt;/p&gt;
&lt;p&gt;​    我虽然是个菜鸡,但也有个成为大牛的梦想. 所以尝试一下写一写</summary>
      
    
    
    
    <category term="杂记" scheme="https://fanlu1994.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="杂记" scheme="https://fanlu1994.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="感想" scheme="https://fanlu1994.github.io/tags/%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
</feed>
